показать файл pg_hba
SELECT type, database, user_name, address, auth_method
FROM pg_hba_file_rules()
WHERE 'replication' = ANY(database);


Определения длинны строки ячейки 
select _userid, length(_settingsdata) as size_of_settingsdata from _systemsettings order by 2 desc limit 3;

Разрешить подключение к БД 
update pg_database set datallowconn = 't' where datname='template0';

-- Проверка таблиц и их расположение (табличное пространство):
SELECT 
    schemaname AS schema_name, 
    tablename AS table_name, 
    tablespace AS tablespace_name
FROM 
    pg_tables
WHERE 
    schemaname NOT IN ('pg_catalog', 'information_schema')
ORDER BY 
    schemaname, tablename;

Проверка индексов и их расположение (табличное пространство):
SELECT 
    schemaname AS schema_name, 
    indexname AS index_name, 
    tablespace AS tablespace_name
FROM 
    pg_indexes
WHERE 
    schemaname NOT IN ('pg_catalog', 'information_schema')
ORDER BY 
    schemaname, indexname;

-- Проверил зависящие от правил сортировки объекты:
ias_rem=# SELECT pg_describe_object(refclassid, refobjid, refobjsubid) AS "Collation",
       pg_describe_object(classid, objid, objsubid) AS "Object"
  FROM pg_depend d JOIN pg_collation c
       ON refclassid = 'pg_collation'::regclass AND refobjid = c.oid
  WHERE c.collversion <> pg_collation_actual_version(c.oid)
  ORDER BY 1, 2;
      Collation      | Object
---------------------+--------
 collation "default" |


-- Размеры таблицы 
select 
pg_total_relation_size(tb1),
pg_total_size(tb1), -- общий размер таблицы или индекса, включая сам объект и все зависимые от него объекты
pg_relation_size(tb1), -- это система-функция в PostgreSQL, которая определяет размер на диске конкретного слоя отношени
pg_table_size(tb1)-pg_relation_size(tb1)
from (select '<tablename>'::regclass as tb1) t1;

#################################
Сброс профиля ожиданий и очистка памяти (сброс статистики ) 
select pg_wait_sampling_reset_profile();
#################################

-- Размеры таблицы 
select 
pg_total_relation_size(tb1),
pg_total_size(tb1), -- общий размер таблицы или индекса, включая сам объект и все зависимые от него объекты
pg_relation_size(tb1), -- это система-функция в PostgreSQL, которая определяет размер на диске конкретного слоя отношени
pg_table_size(tb1)-pg_relation_size(tb1)
from (select '<tablename>'::regclass as tb1) t1;


-- Время с момента запуска процесса postmaster:
psql -c "select date_trunc( 'second',current_timestamp - pg_postmaster_start_time()) as uptime"
-- При "падении" серверного процесса, имеющего доступ к разделяемой памяти, перезапуск postmaster не происходит, в то же время все остальные процессы перезапускаются.
-- В этом случае время перезапуска можно определить по перечитыванию конфигурации:
select pg_conf_load_time();

########################################################
Отслеживание долговыполняющихся запросов и блокировок 
########################################################
--- Долго выполняющиеся запросы. 
-- По активным сесиям state ='active', тип текущего серверного процесса backend_type ='client backend', не равняется pid != pg_backend_pid()
select 
 pid , 
 datname ,  
 query_start , 
 now() - query_start AS duration, 
 state , 
 wait_event_type ,
 wait_event  , 
substring( query from 1 for 100 ) AS query 
from 
pg_stat_activity 
where 
state ='active' and backend_type ='client backend' and pid != pg_backend_pid()
order by 4 desc ;
--- Долго выполняющиеся запросы. 
-- Топ 4 процесса. По активным сесиям state ='active', не равняется pid != pg_backend_pid()
select 
 pid , 
 datname ,  
 query_start , 
 now() - query_start AS duration, 
 state , 
 wait_event_type , 
 wait_event  , 
 substring( query from 1 for 100 ) AS query ,
 usename , 
 application_name , 
 client_addr
from 
pg_stat_activity 
where 
state ='active' and 
pid != pg_backend_pid()
order by 4 desc ;

--Долгие запросы с бликирующими сессиями
pid , 
 pg_blocking_pids(pid),
 datname ,  
 now() - query_start AS query_duration, 
 now() - xact_start AS transaction_duration , 
 state , 
 wait_event_type , 
 wait_event  , 
 substring( query from 1 for 40 ) AS query
from 
pg_stat_activity 
where 
state ='active' and 
pid != pg_backend_pid() and
backend_type = 'client backend'
order by 5 desc ;

select
 pid ,
 pg_blocking_pids(pid),
 datname , 
 usename,
 backend_start::timestamp(0),
 now() - query_start AS query_duration,
 now() - xact_start as xact_duration, 
 wait_event_type ,
 wait_event  ,
 substring( query from 1 for 60 ) AS query
from
pg_stat_activity
where
state ='active' and
pid != pg_backend_pid() and
backend_type = 'client backend'
order by 6 desc ;
#################################
Проверка ожиданий.
#################################
--- Количество ожиданий по типам
select 
 count(*) , 
 state , 
 wait_event_type , 
 wait_event ,
 usename , 
 application_name , 
 backend_type ,
 client_addr
from 
pg_stat_activity 
group by 
 state , 
 wait_event_type , 
 wait_event ,
 usename , 
 application_name , 
 backend_type ,
 client_addr
order by 
2, 1 ;

-- Количество ожиданий по БД
SELECT 
  datname , usename ,  application_name, client_addr ,
  wait_event_type , wait_event  , state , count(*) 
FROM
  pg_stat_activity
WHERE
  pid <> pg_backend_pid()
  AND
  (wait_event_type IS NOT NULL AND wait_event IS NOT NULL )
GROUP BY
  datname , usename , application_name,
  client_addr , wait_event_type , wait_event  , state 
ORDER BY 
  datname  , state ;

-- Количество ожиданий по типу
select
event_type ,
event ,
sum(count) as total
from
pg_wait_sampling_profile
where
queryid <> 0
group by
event_type , event
order by event_type , total desc , event ;


###############################################################################################
Работа с СУБД

Удалить слот 
SELECT pg_drop_replication_slot ('<имя_слота>');

-- Переключение на мастер
pg_ctl promote или
promote_trigger_file -- создать имя файла 
pg_promote()
удалить файл standby.signal и перезапустить резервный сервер  -- а кайних случаях 



Создать реплику из резервной копии 
1) Роль должна быть с парамтером Replication
2) Прописаны доступы чеерз pg_hba
3) Настройка max_wal_sender, wal_level = replica или logical, но не minimal  ( в два потока max_wal_senders ≥ 2)
Мониторинг:  pg_replication_slots. Чек статус active 
pg_basebackup --pgdata=/home/student/backup -R --slot=replica --create-slot
4) Самостоятельно создать слот
 SELECT pg_create_physical_replication_slot('replica');

Проверка в каком режиме работает СУБД 
SELECT pg_is_in_recovery();  -- t - в режиме восстановления, f -  в режиме мастера 

Проверка позиции wal
 На мастера можно проверить с помощью утилиты pg_controldata («Latest checkpoint location»)
На реплике позицию на реплике покажет функция pg_last_wal_receive_lsn().

Что такое можно ускорить rsync, 

3 варианта 
Мастер был остановлен аварийно, велика вероятность того, что часть журнальных записей не успела дойти до реплики. В этом случае просто так подключать мастер нельзя - пересоздание релпики через  pg_basebackup

Утилита pg_rewind - Утилита определяет место расхождения между двумя серверами, определяет ближайшую к нему общую контрольную точку, и, просматривая журнал, определяет все страницы, измененныес момента этой контрольной точки. тилита создает управляющий файл backup_label
Чтобы работал надо сделать :
Целевой сервервсе 
необходимые журнальные файлы должны сохраниться в pg_walили в архиве (--restore-target-wal)
должны быть включены контрольные суммы или wal_log_hints = on
Сервер-источникдолжен 
быть включен параметр full_page_writes = on

Запуск утилиты  pg_rewind
/usr/lib/postgresql/13/bin/pg_rewind -D /var/lib/postgresql/13/alpha --source-server='user=postgres port=5433' -R -P

--- Настройка общего архива 
Мониторинг: pg_stat_archiver
Значение текущего архивного журнала 
SELECT pg_walfile_name(pg_current_wal_lsn());
Принудительно переключим сегмент WAL, вызвав функцию pg_switch_wal. 
!! Чтобы переключение произошло, нужно гарантировать, что текущий и следующий сегменты содержат какие-либо записи. !!!
SELECT pg_switch_wal();
INSERT INTO test SELECT now();

Запрос на отслеживание ошибок в архивации wal 
 SELECT
	pg_walfile_name(pg_current_wal_lsn()) current_wal,
	last_archived_wal,
	last_failed_wal
FROM pg_stat_archiver;
       current_wal        |    last_archived_wal     |     last_failed_wal      
--------------------------+--------------------------+--------------------------
 000000020000000000000007 | 000000020000000000000005 | 000000020000000000000006
ВОТ ЗАЧЕМ НАДО ставить   archive_mode = always
При установке archive_mode = always на реплике запускается процесс archiver, который записывает сегменты в архив наравне с мастером. Таким образом, один и тот же файл будет записан два раза: и мастером, и репликой. Это накладывает на команду archive_command серьезные требования

Как настроить логическую репликацию 
Мониторинг:  SELECT * FROM pg_stat_subscription \gx
Просмотр измеенний при лог репл в слоте SELECT * FROM pg_logical_slot_get_changes('test_slot', NULL, NULL);
1) ALTER SYSTEM SET wal_level = logical
2) Создаю публикацию. Публикация относится к конкретной базе данных; в нее можно включить и несколько таблиц, а можно даже все таблицы сразу (FOR ALL TABLES).
CREATE PUBLICATION test_pub FOR TABLE test;
3) Проверка слота репликации 
\dRp+
                            Publication test_pub
  Owner   | All tables | Inserts | Updates | Deletes | Truncates | Via root 
----------+------------+---------+---------+---------+-----------+----------
 postgres | f          | t       | t       | t       | t         | f
Tables:
    "public.test"
4) На втором сервере подписываемся на публикацию 
Подписку может создать только суперпользователь. А роль для подключения к публикующему серверу должна иметь атрибуты REPLICATION и LOGIN, и также право чтения публикуемых таблиц
CREATE SUBSCRIPTION test_sub
CONNECTION 'port=5432 user=student dbname=replica_logical'
PUBLICATION test_pub;
5) Проверка на втором сервере 
replica_logical=> \dRs
            List of subscriptions
   Name   |  Owner   | Enabled | Publication 
----------+----------+---------+-------------
 test_sub | postgres | t       | {test_pub}
(1 row)

--- Удаление слот репликации  логической 
DROP SUBSCRIPTION test_sub;

Если логическая релпикация будет настроена на одном и том  же сервере 
1) Создаем БД 1  и таблицу for_test Куда будем данные переностить  Создаем БД 2 и теблицу  for_test 
через pg_dump --schema-only БД 1 (источник) | psql -d БД 2 (приемник)
2) Создаем публикацию 
CREATE PUBLICATION test_pub FOR TABLE test;
3) Поскольку репликация будет настроена на одном и том же сервере, вначале вручную создаем слот логической репликации.
 SELECT pg_create_logical_replication_slot('testslot','pgoutput');
4) Создаем подписку 
CREATE SUBSCRIPTION test_sub
CONNECTION 'user=student dbname=replica_logical_1'
PUBLICATION test_pub1
WITH (create_slot = false, slot_name = testslot);

Варинты использования реплики 
Надежность обеспечивает синхронная репликация в режиме synchronous_commit = on (значение write не гарантирует надежность; значение apply будет перебором)
Реплика как можно меньше отставала от основного сервера, нужно применять журнальные записи сразу же. Для этого выставляем задержку max_standby_streaming_delay
Чтобы записи не удалялись с мастера при чтении на реплике hot_standby_feedback = on 

Варианты synchronous_commit
Надежность обеспечивает синхронная репликация в режиме synchronous_commit = on (значение write не гарантирует надежность; значение apply будет перебором)
Режим synchronous_commit = apply позволяет дождаться применения журнальной записи на реплике (ценой сильного падения производительности основного сервера),но остается возможность увидеть данные на реплике раньше, чем на мастере. 

Настройка конфига с двумя репликами 
1) Создаем резервную копию 
pg_basebackup --pgdata=/home/student/backup -R --create-slot --slot=beta
2) Дублирую слот 
(Поскольку третий сервер при старте начнет применять записи WAL с той же позиции, что и второй, можно дублировать слот:)
 SELECT pg_copy_physical_replication_slot('beta','gamma');
3) В когфиге 3 -го сервера изменить название слота 
sudo sed 's/beta/gamma/g' -i /var/lib/postgresql/13/gamma/postgresql.auto.conf

Отложенная репликация
recovery_min_apply_delay - применяет журнальные записи не сразу, а через установленный интервал времени
НО 
Обратную связь следует отключать, чтобы не вызвать разрастание таблиц на мастере
hot_standby_feedback = off
Как остановить применение записей на релике 
 pg_wal_replay_pause() - Дальнейшее проигрывание записей приостанавливается

Важно !!! Можно вернуться на отчку во времени 
Если принято решение вернуться на момент времени до удаления, нужно указать целевую точку восстановления одним из параметров recovery_target_* и перезапустить реплику.

